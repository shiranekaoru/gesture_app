import SwiftUI
import CoreML
import CoreMotion
//main関数の呼び出す回数と，センサのサンプリング周波数は同じであるが，処理の重さなどの外的要因により，インクリメントがずれる
struct ContentView: View {
    //IMU sensor
    @ObservedObject var sensor = MotionSensor()
    
    
    
    //timer(100 Hz)
    let timer = Timer.publish(every: 1/100, on: .main, in: .common).autoconnect()
    
    var body: some View {
        VStack {
            
//            if sensor.isStarted {
//                sensor.predict()
//
//            }
            //Button (ON:ジェスチャ認識開始 OFF:ジェスチャ認識停止)
            Button(action:{
                if sensor.isStarted {
                    sensor.stop()
                }else{
                    sensor.start()
                }
//
            }){
                sensor.isStarted ? Text("predicted..."):Text("START")
            }
            
            
        }
        .onReceive(timer){_ in
            if sensor.isStarted {
                
                sensor.predict()

            }

        }

    }
    
    
}


class MotionSensor: NSObject, ObservableObject{
    let motionManager = CMMotionManager()
    // Load the CoreML model
    let model = Gestures_Classifier_t()
    
    @Published var isStarted = false
    
    
    //gesture pose
    @Published var gesture_pose: String = ""
    
    
    

    //Create arrays for aggregating inputs
    struct ModelConstants{
        static let predictionWindowSize = 100
        static let sensorsUpdateInterval = 1.0/100.0
        static let stateInLength = 400
    }
    
    //acceleration
    let accelDataX = try! MLMultiArray(shape:[ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    let accelDataY = try! MLMultiArray(shape: [ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    let accelDataZ = try! MLMultiArray(shape: [ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    //gyro sensor
    let gyroDataX = try! MLMultiArray(shape: [ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    let gyroDataY = try! MLMultiArray(shape: [ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    let gyroDataZ = try! MLMultiArray(shape: [ModelConstants.predictionWindowSize] as [NSNumber], dataType: MLMultiArrayDataType.double)
    
    var stateOutput = try! MLMultiArray(shape: [ModelConstants.stateInLength as NSNumber], dataType: MLMultiArrayDataType.double)
    
    var currentIndexInPredictionWindow: Int = 0
    
    @Published var timestamp = 0.0
    
    @Published var cnt: Int = 0
    
    
    func start(){
        if motionManager.isDeviceMotionAvailable{
            motionManager.deviceMotionUpdateInterval = 1/100
            motionManager.startDeviceMotionUpdates(to: OperationQueue.current!, withHandler: {(motion:CMDeviceMotion?, error:Error?) in self.updateMotionData(deviceMotion: motion!)})
            
        }
        
        isStarted = true
    }
    
    func stop(){
        isStarted = false
        motionManager.stopDeviceMotionUpdates()
    }
    
    func predict(){
//        print(cnt)
        if(currentIndexInPredictionWindow % ModelConstants.predictionWindowSize == 0){
            if let predictedActivity = perfomModelPrediction(){
                //初期化

                cnt = 0

                //
                if predictedActivity == "pinch_3"{
                    gesture_pose = "pinch"
                }else if predictedActivity == "neutral_3"{
                    gesture_pose = "neutral"
                }
                
                
                print(gesture_pose)


            }
        }
    }
    
    private func updateMotionData(deviceMotion:CMDeviceMotion){
        
        cnt+=1
        currentIndexInPredictionWindow = cnt
        accelDataX[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.userAcceleration.x as NSNumber
        accelDataY[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.userAcceleration.y as NSNumber
        accelDataZ[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.userAcceleration.z as NSNumber
        gyroDataX[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.rotationRate.x as NSNumber
        gyroDataY[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.rotationRate.y as NSNumber
        gyroDataZ[[currentIndexInPredictionWindow] as [NSNumber]] = deviceMotion.rotationRate.z as NSNumber
        
    }
    
    
    func perfomModelPrediction() -> String?{
        
        let modelPrediction = try! model.prediction(accex: accelDataX, accey: accelDataY, accez: accelDataZ, gyrox: gyroDataX, gyroy: gyroDataY, gyroz: gyroDataZ, stateIn: stateOutput)
        
        stateOutput = modelPrediction.stateOut
        
        return modelPrediction.label
    }
}

